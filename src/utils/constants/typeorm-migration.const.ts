const PrimaryGenColType = {
  INT: 'int',
  INT2: 'int2',
  INT4: 'int4',
  INT8: 'int8',
  INTEGER: 'integer',
  TINYINT: 'tinyint',
  SMALLINT: 'smallint',
  MEDIUMINT: 'mediumint',
  BIGINT: 'bigint',
  DEC: 'dec',
  DECIMAL: 'decimal',
  SMALLDECIMAL: 'smalldecimal',
  FIXED: 'fixed',
  NUMERIC: 'numeric',
  NUMBER: 'number',
};

const SpatialColType = {
  GEOMETRY: 'geometry',
  GEOGRAPHY: 'geography',
  ST_GEOMETRY: 'st_geometry',
  ST_POINT: 'st_point',
};

const WithPrecisionColType = {
  FLOAT: 'float',
  DOUBLE: 'double',
  DEC: 'dec',
  DECIMAL: 'decimal',
  SMALLDECIMAL: 'smalldecimal',
  FIXED: 'fixed',
  NUMERIC: 'numeric',
  REAL: 'real',
  DOUBLE_PRECISION: 'double precision',
  NUMBER: 'number',
  DATETIME: 'datetime',
  DATETIME2: 'datetime2',
  DATETIMEOFFSET: 'datetimeoffset',
  TIME: 'time',
  TIME_WITH_TIME_ZONE: 'time with time zone',
  TIME_WITHOUT_TIME_ZONE: 'time without time zone',
  TIMESTAMP: 'timestamp',
  TIMESTAMP_WITHOUT_TIME_ZONE: 'timestamp without time zone',
  TIMESTAMP_WITH_TIME_ZONE: 'timestamp with time zone',
  TIMESTAMP_WITH_LOCAL_TIME_ZONE: 'timestamp with local time zone',
};

const WithLengthColType = {
  CHARACTER_VARYING: 'character varying',
  VARYING_CHARACTER: 'varying character',
  CHAR_VARYING: 'char varying',
  NVARCHAR: 'nvarchar',
  NATIONAL_VARCHAR: 'national varchar',
  CHARACTER: 'character',
  NATIVE_CHARACTER: 'native character',
  VARCHAR: 'varchar',
  CHAR: 'char',
  NCHAR: 'nchar',
  NATIONAL_CHAR: 'national char',
  VARCHAR2: 'varchar2',
  NVARCHAR2: 'nvarchar2',
  ALPHANUM: 'alphanum',
  SHORTTEXT: 'shorttext',
  RAW: 'raw',
  BINARY: 'binary',
  VARBINARY: 'varbinary',
  STRING: 'string',
};

const WithWidthColType = {
  TINYINT: 'tinyint',
  SMALLINT: 'smallint',
  MEDIUMINT: 'mediumint',
  INT: 'int',
  BIGINT: 'bigint',
};
/**
 * All other regular column types.
 */
const SimpleColType = {
  SIMPLE_ARRAY: 'simple-array',
  SIMPLE_JSON: 'simple-json',
  SIMPLE_ENUM: 'simple-enum',
  INT2: 'int2',
  INTEGER: 'integer',
  INT4: 'int4',
  INT8: 'int8',
  INT64: 'int64',
  UNSIGNED_BIG_INT: 'unsigned big int',
  FLOAT: 'float',
  FLOAT4: 'float4',
  FLOAT8: 'float8',
  SMALLMONEY: 'smallmoney',
  MONEY: 'money',
  BOOLEAN: 'boolean',
  BOOL: 'bool',
  TINYBLOB: 'tinyblob',
  TINYTEXT: 'tinytext',
  MEDIUMBLOB: 'mediumblob',
  MEDIUMTEXT: 'mediumtext',
  BLOB: 'blob',
  TEXT: 'text',
  NTEXT: 'ntext',
  CITEXT: 'citext',
  HSTORE: 'hstore',
  LONGBLOB: 'longblob',
  LONGTEXT: 'longtext',
  ALPHANUM: 'alphanum',
  SHORTTEXT: 'shorttext',
  BYTES: 'bytes',
  BYTEA: 'bytea',
  LONG: 'long',
  RAW: 'raw',
  LONG_RAW: 'long raw',
  BFILE: 'bfile',
  CLOB: 'clob',
  NCLOB: 'nclob',
  IMAGE: 'image',
  TIMETZ: 'timetz',
  TIMESTAMPTZ: 'timestamptz',
  TIMESTAMP_WITH_LOCAL_TIME_ZONE: 'timestamp with local time zone',
  SMALLDATETIME: 'smalldatetime',
  DATE: 'date',
  INTERVAL_YEAR_TO_MONTH: 'interval year to month',
  INTERVAL_DAY_TO_SECOND: 'interval day to second',
  INTERVAL: 'interval',
  YEAR: 'year',
  SECONDDATE: 'seconddate',
  POINT: 'point',
  LINE: 'line',
  LSEG: 'lseg',
  BOX: 'box',
  CIRCLE: 'circle',
  PATH: 'path',
  POLYGON: 'polygon',
  GEOGRAPHY: 'geography',
  GEOMETRY: 'geometry',
  LINESTRING: 'linestring',
  MULTIPOINT: 'multipoint',
  MULTILINESTRING: 'multilinestring',
  MULTIPOLYGON: 'multipolygon',
  GEOMETRYCOLLECTION: 'geometrycollection',
  ST_GEOMETRY: 'st_geometry',
  ST_POINT: 'st_point',
  INT4RANGE: 'int4range',
  INT8RANGE: 'int8range',
  NUMRANGE: 'numrange',
  TSRANGE: 'tsrange',
  TSTZRANGE: 'tstzrange',
  DATERANGE: 'daterange',
  ENUM: 'enum',
  SET: 'set',
  CIDR: 'cidr',
  INET: 'inet',
  MACADDR: 'macaddr',
  BIT: 'bit',
  BIT_VARYING: 'bit varying',
  VARBIT: 'varbit',
  TSVECTOR: 'tsvector',
  TSQUERY: 'tsquery',
  UUID: 'uuid',
  XML: 'xml',
  JSON: 'json',
  JSONB: 'jsonb',
  VARBINARY: 'varbinary',
  HIERARCHYID: 'hierarchyid',
  SQL_VARIANT: 'sql_variant',
  ROWID: 'rowid',
  UROWID: 'urowid',
  UNIQUEIDENTIFIER: 'uniqueidentifier',
  ROWVERSION: 'rowversion',
  ARRAY: 'array',
  CUBE: 'cube',
  LTREE: 'ltree',
};

export const MigrationType = {
  ...PrimaryGenColType,
  ...WithPrecisionColType,
  ...WithLengthColType,
  ...WithWidthColType,
  ...SpatialColType,
  ...SimpleColType,
};

type KeysGenStrategy = 'uuid' | 'increment' | 'rowid' | 'identity';
export const GenStrategy = {
  uuid: 'uuid' as KeysGenStrategy,
  rowid: 'rowid' as KeysGenStrategy,
  increment: 'increment' as KeysGenStrategy,
  identity: 'identity' as KeysGenStrategy,
};
